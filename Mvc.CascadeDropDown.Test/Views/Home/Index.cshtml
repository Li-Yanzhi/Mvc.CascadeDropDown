
@using Mvc.CascadeDropDown
@model Mvc.CascadeDropDown.Test.Models.CascadingDropDownContainerModel


<script>
    function beforeSend(json) {
        json.currency = json.country == "US" ? "USD" : "GBP";
        alert("<p><strong>Going to send:</strong></p><p><small>" + JSON.stringify(json, null, "\t") + "</small></p>", "BeforeSend callback", "success");
        return json;
    }

    function onComplete(data, error) {
        if (data) {
            msg = "<small>" + JSON.stringify(data, null, "\t") + "</small>";
            alert(msg, "Successfull onComplete callback", "info");
        }
        if (error) {
            msg = "<p><strong>Got Error:</strong>></p><p>" + error + "</p>";
            alert(msg, "Error onComplete callback", "info");
        }
    }

    function onSuccess(data) {
        data.push({ Text: "added Item", Value: "" });
        msg = "<p><strong>Received data was modified</strong></p><p><small>" + JSON.stringify(data, null, "\t") + "</small></p>";
        alert(msg, "OnSuccess callback", "success");
    }

    function onFailure(responseText, responseStatus, statusText) {
        var obj = {
            responseText: responseText,
            responseStatus: responseStatus,
            statusText: statusText
        }
        msg = "<p><strong>Got Error:</strong>></p><p><small>" + JSON.stringify(obj, null, "\t") + "</small></p>"
        alert(msg, "OnFailure callback", "error");
    }

</script>

@using (Html.BeginForm("CascadingDropDownTest", "Home", FormMethod.Post))
{

    <div class="form-horizontal">
        <div class="form-group">
            @{
                var countries = new List<SelectListItem> {
                  new SelectListItem
                {
                    Text = "US",
                    Value = "US"
                },
                new SelectListItem
                {
                    Text = "UK",
                    Value = "UK"
                }};
            }
            @Html.DropDownListFor(m => m.SubModel.SelectedCountry, countries, "Please select a Country", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.SubModel.SelectedCountry)
        </div>
        <div class="form-group">
            @Html.CascadingDropDownListFor(expression: m => m.SubModel.SelectedCity,
                                triggeredByProperty: m => m.SubModel.SelectedCountry,
                                url: Url.Action("GetCities", "Home"),
                                ajaxActionParamName: "country",
                                disabledWhenParentNotSelected: true,
                                htmlAttributes: new { @class = "form-control" },
                                options: new CascadeDropDownOptions
                                {
                                    BeforeSend = "beforeSend",
                                    HttpMethod = "post",
                                    OnCompleteGetData = "onComplete",
                                    OnFailureGetData = "onFailure",
                                    OnSuccessGetData = "onSuccess"
                                })
            @Html.ValidationMessageFor(m => m.SubModel.SelectedCity)
        </div>
        <div class="form-group">
            @Html.CascadingDropDownListFor(m => m.SubModel.SelectedStreet, m => m.SubModel.SelectedCity, Url.Action("GetStreets", "Home"), "city", "Please select a Street", true, new { @class = "form-control" }, new CascadeDropDownOptions
       {
           OnFailureGetData = "onFailure",
       })
            @Html.ValidationMessageFor(m => m.SubModel.SelectedStreet)
        </div>
    </div>

    <input type="submit" value="Submit" class="btn btn-primary" />

                }